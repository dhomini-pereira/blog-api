generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  relationMode = "foreignKeys"
  url          = env("DATABASE_URL")
}

model Role {
  id          BigInt       @id @default(autoincrement())
  name        String       @unique @db.VarChar(255)
  description String       @db.VarChar(255)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  permissions Permission[] @relation("roles_permissions")
  users       User[]       @relation("users_roles")

  @@map("roles")
}

model Permission {
  id          BigInt @id @default(autoincrement())
  name        String @unique @db.VarChar(255)
  description String @db.VarChar(255)
  roles       Role[] @relation("roles_permissions")

  @@map("permissions")
}

model User {
  id            String         @id @default(uuid())
  name          String         @db.VarChar(255)
  email         String         @unique
  password      String
  imageUrl      String?        @map("image_url") @db.VarChar(255)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")
  posts         Post[]
  comments      Comment[]
  roles         Role[]         @relation("users_roles")
  likes         Like[]
  messages      Message[]
  conversations Conversation[]
  notifications Notification[]
  followers     Follow[]       @relation("followers")
  following     Follow[]       @relation("following")

  @@index([email, password])
  @@map("users")
}

model Post {
  id        BigInt    @id @default(autoincrement())
  title     String    @db.VarChar(255)
  content   String    @db.Text()
  bannerUrl String    @map("banner_url") @db.VarChar(255)
  likes     Like[]
  shares    BigInt    @default(0)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  userId    String?   @map("user_id")
  author    User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  comments  Comment[]
  flags     Flag[]    @relation("posts_flags")

  @@map("posts")
}

model Like {
  id        BigInt   @id @default(autoincrement())
  postId    BigInt
  userId    String?
  author    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([postId, userId])
  @@map("likes")
}

model Comment {
  id        BigInt   @id @default(autoincrement())
  content   String   @db.VarChar(255)
  likes     BigInt   @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  userId    String?  @map("user_id")
  postId    BigInt   @map("post_id")
  author    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Flag {
  id        BigInt   @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  posts     Post[]   @relation("posts_flags")

  @@map("flags")
}

model Chat {
  id           BigInt         @id @default(autoincrement())
  isGroup      Boolean        @default(false)
  name         String?        @db.VarChar(100)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  participants Conversation[]
  messages     Message[]

  @@map("chats")
}

model Conversation {
  conversationId BigInt @map("conversation_id")
  userId         String @map("user_id")
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat           Chat   @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([conversationId, userId])
  @@map("conversations")
}

model Message {
  id             BigInt   @id @default(autoincrement())
  conversationId BigInt   @map("conversation_id")
  authorId       String?  @map("author_id")
  content        String   @db.Text()
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  chat           Chat     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  author         User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@map("messages")
}

model Notification {
  id         BigInt  @id @default(autoincrement())
  content    String
  navigation String?
  userId     String  @map("user_id")
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follow {
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")
  follower    User     @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@map("follows")
}
